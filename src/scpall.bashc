#!/bin/bash
#
# scpall - scp files to all nodes
# https://github.com/dealfonso/runall
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat <<EOF

scpall is a tool that scps files to multiple hosts, using SCP command. It is highly advised
  to configure ssh without password for better experience. If no folder provided, the files
  are copied to its location in the host from their are copied.

$0 <options> <files1> <file2> ... <fileN>

  <commandline>             The whole commandline that you want to run in the hosts.
                            * if not provided, it will be read from stdin.
  --user | -u <username>    Sets the user to scp with (i.e. will scp <username>@host:... instead of 
                            the current user).
  --summarize | -S          Summarize what is going to happen and wait for user confirmation
  --ask | -a                Confirm each command before running it in the destination host
                            (this will not happen when running in background)
  --folder | -f <folder>    Copies to folder <folder>, instead of the original location.
  --make-folder | -M        Make the folder previous to trying to copy the files (on each host).
  --recurse | -r            Copy recursively.
  --override-hosts | -O     Override the list of hosts in the configuration file
  --hostlist | -H <hostlist>
                            The list of hosts where the command is being run. This parameter can
                            appear as many time as needed. The format is a comma separated list of
                            hostnames. The list can contain numerical ranges [BEGINNING-END] that
                            will be expanded (e.g. myhost1,myhost[2-3] will be translated into
                            myhost1,myhost2,myhost3).
  --exclude-hostlist | -X <hostlist>
                            Host list in which the command is not being run. The format is the same
                            than in --hostlist. Notice that this list has more priority than the
                            --hostlist.
  --mute | -m               Mute the output (i.e. redirect it to /dev/null).
  --quiet | -q              Makes the command quiet (it will override --summarize and --ask)
  --version | -V            Shows the version number and finalizes.
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.

EOF
}

function verify_dependencies() {
  if ! cat --version >/dev/null 2>&1; then
    bashc.finalize 1 "cat is needed"
  fi
  if ! grep --version >/dev/null 2>&1; then
    bashc.finalize 1 "grep is needed"
  fi
  if ! ssh -V >/dev/null 2>&1; then
    bashc.finalize 1 "ssh is needed"
  fi
}

# Some basic includes
source debug.bashc
source parameters.bashc
source utils.bashc
source config.bashc
source version
source inc/common.bash

# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"
bashc.parameters_start

RECURSE=false
FILELIST=()
SCPUSER="$(whoami)"
CONFIGFILE="/etc/runall/scpall.conf /etc/scpall.conf etc/scpall.conf"
while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --env-var|-e)           bashc.parameters_next
                            PARAM="$(bashc.parameters_current)"
                            if ! parse_env_var "$PARAM"; then
                              bashc.finalize 1 "bad format for env variable $PARAM"
                            fi
                            ;;
    --prefix|-p)            bashc.parameters_next
                            PREFIX="$(bashc.parameters_current)";;
    --folder|-f)            bashc.parameters_next
                            FOLDER="$(bashc.parameters_current)";;
    --user|-u)              bashc.parameters_next
                            SCPUSER="$(bashc.parameters_current)";;
    --quiet|-q)             QUIET=true;;
    --make-folder|-M)       MAKEFOLDER=true;;
    --summarize|-S)         SUMMARIZE=true;;
    --ask|-a)               ASK=true;;
    --override-hosts|-O)    OVERRIDEHOSTS=true;;
    --hostlist|-H)          bashc.parameters_next
                            hostlist A "$(bashc.parameters_current)";;
    --exclude-hostlist|-X)  bashc.parameters_next
                            hostlist D "$(bashc.parameters_current)";;
    --mute|-m)              MUTEOUTPUT=true;;
    --verbose|-v)           VERBOSE=true;;
    --recurse|-r)           RECURSE=true;;
    --debug)                DEBUG=true
                            VERBOSE=true;;
    --config|-c)            bashc.parameters_next
                            CONFIGFILE="$(bashc.parameters_current)";;
    --version | -V)         echo "$VERSION" && bashc.finalize;;
    --help | -h)            usage && bashc.finalize;;
    *)                      FILELIST+=("$PARAM");;
  esac
done

verify_dependencies

bashc.readconffiles "$CONFIGFILE" HOSTS SCPOPTIONS SSHOPTIONS

if [ "$HOSTS" != "" ]; then
  if [ "$OVERRIDEHOSTS" != "true" ]; then
    hostlist P "$HOSTS"
  else
    p_info "overriding hosts from config file"
  fi
fi

bashc.dump_vars HOSTS PREFIX SSHOPTIONS SHELL

excludehosts

# If we have no host to run in, finalize
if [ ${#_HOSTS_LIST} -eq 0 ]; then
  bashc.finalize 0 "no hosts where to copy"
fi

# If we have no command to run, finalize
if [ ${#FILELIST[@]} -eq 0 ]; then
  bashc.finalize 0 "no files selected to copy"
fi

# Summarize what is going to happen (if requested)
if [ "$SUMMARIZE" == "true" ]; then
  p_out "
SUMMARY:
hosts: 
${_HOSTS_LIST[@]}

files:
${FILELIST[@]}

recurse: ${RECURSE}
"
  if [ "$QUIET" != "true" ]; then
    read -p "press return to continue (CTRL-C aborts) "
  fi
fi

if [ "$RECURSE" == "true" ]; then
  RECURSE=-r
else
  RECURSE=
fi

# Start running
FAILS=0
for ((f=0;f<${#FILELIST[@]};f=f+1)); do
  for ((n=0;n<${#_HOSTS_LIST[@]};n=n+1)); do
    # We are running in sequential
    SRCFILE="${FILELIST[$f]}"
    TOHOST="${SCPUSER}@${_HOSTS_LIST[$n]}"
    DSTFILE="${FILELIST[$f]}"
    if [ "$FOLDER" != "" ]; then
      DSTFILE="${FOLDER}/$(basename "${DSTFILE}")"
    fi
    DSTFOLDER="$(dirname "$DSTFILE")"
    if [ "$MAKEFOLDER" == "true" ]; then
      p_info "ssh $TOHOST sh -c \"mkdir -p $DSTFOLDER\""
    fi
    p_debug "scp ${RECURSE} ${SRCFILE} ${TOHOST}:${DSTFOLDER}"

    SHOULDRUN=true
    if [ "$ASK" == "true" ]; then
      # If requested to ask for each run, ask the user
      if [ "$QUIET" != "true" ]; then
        read -p "copy? (Y/n) "  SHOULDRUN 
      fi

      # The default is true and we should only admit "n", but will admit also "no" to skip running
      SHOULDRUN="${SHOULDRUN,,}"
      if [ "$SHOULDRUN" == "n" -o "$SHOULDRUN" == "no" ]; then
        SHOULDRUN=false
      else
        SHOULDRUN=true
      fi
    fi

    if [ "$SHOULDRUN" == "true" ]; then
      # If we have to run the command, let's run it
      p_info "scp ${RECURSE} ${SRCFILE} ${TOHOST}:${DSTFOLDER}"
      if [ "$MUTEOUTPUT" == "true" ]; then
        runin "${_HOSTS_LIST[$n]}" - "mkdir" "-p" "$DSTFOLDER" > /dev/null 2> /dev/null
        scp $SCPOPTIONS ${RECURSE} "${SRCFILE}" "${TOHOST}:${DSTFOLDER}" > /dev/null 2> /dev/null
        if [ $? -ne 0 ]; then
          FAILS=$((FAILS+1))
        fi
      else
        runin "${_HOSTS_LIST[$n]}" - "mkdir" "-p" "$DSTFOLDER"
        scp $SCPOPTIONS ${RECURSE} "${SRCFILE}" "${TOHOST}:${DSTFOLDER}"
        if [ $? -ne 0 ]; then
          FAILS=$((FAILS+1))
        fi
      fi
    else
      p_debug "skipping run in ${_HOSTS_LIST[$n]}"
    fi
  done
done

bashc.finalize $FAILS