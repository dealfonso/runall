#!/bin/bash
#
# runall - run a command in all nodes
# https://github.com/dealfonso/runall
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
function usage() {
  cat <<EOF

runall is a tool that runs a command in multiple hosts, using SSH to them. It is highly advised
  to configure ssh without password for better experience. In special, in case that you run commands
  in background, this command will not work properly.

$0 <options> -- [ <commandline> ]

  <commandline>             The whole commandline that you want to run in the hosts.
                            * if not provided, it will be read from stdin.
  --user | -u <username>    Sets the user to ssh with (i.e. will ssh <username>@host instead of ssh host)
  --localhost | -l          Runs the command also in localhost
  --shell | -s <shell command>
                            Set the shell to use when running the commands in the remote servers
                            * the default value is "sh" (other choices bash, ash, etc.)
  --summarize | -S          Summarize what is going to happen and wait for user confirmation
  --ask | -a                Confirm each command before running it in the destination host
                            (this will not happen when running in background)
  --override-hosts | -O     Override the list of hosts in the configuration file
  --hostlist | -H <hostlist>
                            The list of hosts where the command is being run. This parameter can
                            appear as many time as needed. The format is a comma separated list of
                            hostnames. The list can contain numerical ranges [BEGINNING-END] that
                            will be expanded (e.g. myhost1,myhost[2-3] will be translated into
                            myhost1,myhost2,myhost3).
  --exclude-hostlist | -X <hostlist>
                            Host list in which the command is not being run. The format is the same
                            than in --hostlist. Notice that this list has more priority than the
                            --hostlist.
  --mute | -m               Mute the output (i.e. redirect it to /dev/null).
  --background | -b         Run the commmands in background. In that case, the output of each run
                            will be to a random file with the prefix /tmp/runall-hostname-* that will
                            be left in the host in which the command is run.
  --quiet | -q              Makes the command quiet (it will override --summarize and --ask)
  --version | -V            Shows the version number and finalizes.
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.

EOF
}
function verify_dependencies() {
  if ! cat --version >/dev/null 2>&1; then
    bashc.finalize 1 "cat is needed"
  fi
  if ! grep --version >/dev/null 2>&1; then
    bashc.finalize 1 "grep is needed"
  fi
  if ! ssh -V >/dev/null 2>&1; then
    bashc.finalize 1 "ssh is needed"
  fi
}
# Some basic includes
_MUTED_EXPRESSIONS=()
function p_errfile() {
  local i
  local E
  for ((i=0;i<${#_MUTED_EXPRESSIONS[@]};i=i+1)); do
    E="${_MUTED_EXPRESSIONS[$i]}"
    if [[ "$1" =~ ^$E ]]; then
      return 0
    fi
  done
  if [ "$LOGFILE" == "" ]; then
    echo "$@" >&2
  else
    touch -f "$LOGFILE"
    if [ $? -eq 0 ]; then
      echo "$@" >> "$LOGFILE"
    fi
  fi
}
function p_error() {
  local O_STR="[ERROR] $LOGGER $(date +%Y.%m.%d-%X) $@"
  p_errfile "$O_STR"
}
function p_warning() {
  local O_STR="[WARNING] $LOGGER $(date +%Y.%m.%d-%X) $@"
  p_errfile "$O_STR"
}
function p_info() {
  if [ "$VERBOSE" == "true" -o "$DEBUG" == "true" ]; then
    local O_STR="[INFO] $LOGGER $(date +%Y.%m.%d-%X) $@"
    p_errfile "$O_STR"
  fi
}
function p_out() {
  if [ "$QUIET" != "true" ]; then
    #while read; do
      echo "$@"
    #done <<< "$@"
  fi
}
function p_debug() {
  local L
  if [ "$DEBUG" == "true" ]; then
    local TS="$(date +%Y.%m.%d-%X)"
    p_errfile "[DEBUG] $LOGGER $TS $@"
    #while read; do
    #  p_errfile "[DEBUG] $LOGGER $TS $REPLY"
    #done <<< "$@"
  fi
}
_OLD_LOGGER=
function bashc.finalize() {
  # Finalizes the execution of the this script and shows an error (if provided)
  local ERR=$1
  shift
  local COMMENT=$@
  [ "$ERR" == "" ] && ERR=0
  [ "$COMMENT" != "" ] && p_error "$COMMENT"
  exit $ERR
}
_BASHC_current_param_id=-1
_BASHC_COMMANDLINE_ARRAY=( )
function bashc.parameters_start() {
  _BASHC_current_param_id=-1
}
function bashc.parameters_next() {
  _BASHC_current_param_id=$((_BASHC_current_param_id+1))
  if ((_BASHC_current_param_id<${#_BASHC_COMMANDLINE_ARRAY[@]})); then
    return 0
  fi
  return 1
}
function bashc.parameters_current() {
  printf "%s" "${_BASHC_COMMANDLINE_ARRAY[$_BASHC_current_param_id]}"
}
function bashc.parameter_parse_commandline() {
  local n=0
  local f
  while [ $# -gt 0 ]; do
      if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" -a "${1:1:1}" != "" ]; then
          for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
              _BASHC_COMMANDLINE_ARRAY[$n]="$f"
              n=$(($n+1))
          done
      else
          _BASHC_COMMANDLINE_ARRAY[$n]="$1"
          n=$(($n+1))
      fi
      shift
  done
  return $n
}
function bashc.trim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  A="${A%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}
function bashc.list_append() {
  # Usage:
  #  bashc.list_append ARRNAME p1 p2 p3 p4
  # Effect:
  #  ARRNAME
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local n
  shift
  if bashc.is_int "$SIZE"; then
    n=$SIZE
    while [ $# -gt 0 ]; do
      read ${AN}[$n] <<< "$1"
      n=$((n+1))
      shift
    done
  fi
}
function bashc.in_list() {
  # Usage:
  #  bashc.in_list ARRNAME <elem>
  local AN="$1"
  local SIZE=$(eval "echo \${#$AN[@]}")
  local T n
  if bashc.is_int "$SIZE"; then
    for ((n=0;n<SIZE;n=n+1)); do 
      T="$AN[$n]"
      if [ "${!T}" == "$2" ]; then
        return 0
      fi
    done
  fi
  return 1
}
function bashc.is_int() {
  if [[ "$1" =~ ^[+-]{0,1}[0-9]+$ ]]; then
    return 0
  fi
  return 1
}
function bashc.dump_vars() {
  while [ $# -gt 0 ]; do
    p_debug "$1=${!1}"
    shift
  done
}
# Function that expands basic ranges in lines. It accepts multiple ranges that may be letters (e.g. [a-z]) or numbers (e.g. [3-5]); even
#   the reverse order is accepted (e.g. 3-1).
# 
#   E.g. host0[0-4] is expanded into host00 host01 host02 host03 host04
#   E.g. host[0-2][c-a] is expanded into host0c host0b host0a host1c host1b host1a host2c host2b host2a
function bashc.expand_ranges() {
  local NAME="$1"
  local v PATTERN CONTENT L_LIMIT U_LIMIT
  local RANGE="$(echo "$NAME" | grep -o '\[\([0-9]\{1,\}-[0-9]\{1,\}\|[a-z]-[a-z]\|[A-Z]-[A-Z]\)\]' | head -1)"
  if [ "$RANGE" != "" ]; then
    RANGE="${RANGE:1:-1}"
    PATTERN="\[${RANGE}\]"
    p_debug "range detected: $RANGE"
    IFS='-' read L_LIMIT U_LIMIT <<< "$RANGE"
    for v in $(eval "echo {$L_LIMIT..$U_LIMIT}"); do
      CONTENT="${NAME/$PATTERN/$v}"
      bashc.expand_ranges "$CONTENT"
    done
    return 0
  fi
  echo $NAME
  return 1
}
# Reads a configuration file and set its variables (removes comments, blank lines, trailing spaces, etc. and
# then reads KEY=VALUE settings)
function bashc.readconffiles() {
  CONFIGFILES="$1"
  shift
  # Read the config files
  for F in $CONFIGFILES; do
    p_debug "processing file configuration file $F"
    bashc.readconffile "$F" "$@"
    RESULT=$?
    if [ $RESULT -eq 255 ]; then
      p_debug "configuration file $F does not exist"
    else
      if [ $RESULT -gt 10 ]; then
        bashc.finalize 1 "too errors in the configuration file ($RESULT)"
      else
        p_info "configuration read from file $F"
      fi
    fi
  done
}
function bashc.readconffile() {
  local _CONF_FILE="$1"
  # If the config file does not exist return failure
  if [ ! -e "$_CONF_FILE" ]; then
    return 255
  fi
  # First we read the config file
  _TXT_CONF="$(cat "$_CONF_FILE" | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d')"
  shift
  if [ $# -gt 0 ]; then
    bashc.readconf "$_TXT_CONF" "$@"
  else
    bashc.readconf "$_TXT_CONF"
  fi
  return $?
}
function bashc.readconf() {
  local _TXT_CONF="$1"
  local _CURRENT_KEY _CURRENT_VALUE
  local L
  local _VALID_KEYS=( )
  # Now read the valid keys
  shift
  bashc.list_append _VALID_KEYS "$@"
  local _EXITCODE=0
  local MULTILINE_KEY=
  local MULTILINE_BUFFER=
  # Let's read the lines
  while read L; do
    if [ "$MULTILINE_KEY" != "" ]; then
      MULTILINE_BUFFER="${MULTILINE_BUFFER}\n${L}"
      if [[ "$L" =~ [^\"]*\"[[:blank:]]*$ ]]; then
        _CURRENT_KEY="$MULTILINE_KEY"
        _CURRENT_VALUE="$MULTILINE_BUFFER"
        MULTILINE_KEY=
        MULTILINE_BUFFER=
      else
        continue
      fi
    else
      if [[ "$L" =~ ^[[:blank:]]*[A-Za-z_][A-Za-z0-9_]*=\"[^\"]*$ ]]; then
        IFS='=' read _CURRENT_KEY _CURRENT_VALUE <<< "$L"
        MULTILINE_KEY="$_CURRENT_KEY"
        MULTILINE_BUFFER="$_CURRENT_VALUE"
        continue
      else
        if [[ "$L" =~ ^[[:blank:]]*[A-Za-z_][A-Za-z0-9_]*= ]]; then
          IFS='=' read _CURRENT_KEY _CURRENT_VALUE <<< "$L"
        else
          if [ "${L%%\#*}" != "" ]; then
            p_error "invalid configuration line '$L'"
            _EXITCODE=$((_EXITCODE+1))
          fi
        fi
      fi
    fi
    if [ "$_CURRENT_KEY" == "" ]; then
      continue
    fi
    if ((_EXITCODE>=254)); then
      p_error "too errors to consider this file"
      return $_EXITCODE
    fi
    _CURRENT_VALUE="$(bashc.cleanvalue "$_CURRENT_VALUE")"
    if [ $? -ne 0 ]; then
      p_warning "ignoring invalid value $_CURRENT_VALUE for key $_CURRENT_KEY"
      _EXITCODE=$((_EXITCODE+1))
    else
      _CURRENT_VALUE="$(printf "$_CURRENT_VALUE" | envsubst)"
      if [ ${#_VALID_KEYS[@]} -eq 0 ] || bashc.in_list _VALID_KEYS $_CURRENT_KEY; then
        read -d '\0' "$_CURRENT_KEY" <<< "${_CURRENT_VALUE}"
        # The value is exported so that it is available for the others subprocesses
        export $_CURRENT_KEY
      else
        p_warning "$_CURRENT_KEY ignored"
      fi
      p_debug "$_CURRENT_KEY=$_CURRENT_VALUE"
      _CURRENT_KEY=
      _CURRENT_VALUE=
    fi
  done <<< "$_TXT_CONF"
  return $_EXITCODE
}
function bashc.cleanvalue() {
  local A="$1"
  local VALUE=
  local STILL_WORKING="true"
  while [ "$STILL_WORKING" == "true" ]; do
    STILL_WORKING="false"
    if [[ "$A" =~ ^[^\#\"\'[:space:]]+ ]]; then
      VALUE="${VALUE}${BASH_REMATCH[0]}"
      A="${A:${#BASH_REMATCH[0]}}"
      STILL_WORKING="true"
    fi
    if [ "$STILL_WORKING" == "false" ] && [[ "$A" =~ ^\"([^\"\\]*(\\.[^\"\\]*)*)\" ]]; then
      VALUE="${VALUE}${BASH_REMATCH[1]}"
      A="${A:${#BASH_REMATCH[0]}}"
      STILL_WORKING="true"
    fi
    if [ "$STILL_WORKING" == "false" ] && [[ "$A" =~ ^\'([^\']*)\' ]]; then
      VALUE="${VALUE}${BASH_REMATCH[1]}"
      A="${A:${#BASH_REMATCH[0]}}"
      STILL_WORKING="true"
    fi
  done
  echo "$VALUE"
  A="$(bashc.trim "$A")"
  if [ "${A:0:1}" == "#" ]; then
    return 0
  fi
  if [ "$A" != "" ]; then
    return 1
  fi
  return 0
}
VERSION=1.2-beta.0
_HOSTS_LIST=( )
_EXCLUDED_HOSTS_LIST=( )
function hostlist() {
  local OP="$1"
  local HOSTS="$2"
  local HOST HNAME
  while read -d ',' HOST; do
    if [ "$HOST" != "" ]; then
      local H_EXPANDED=()
      while read HNAME; do
        H_EXPANDED+=("$HNAME")
      done <<< "$(bashc.expand_ranges "$HOSTS")"
      p_debug "${H_EXPANDED[@]}"
      if [ "$OP" == "P" ]; then
        p_debug "pushing ${H_EXPANDED[@]}"
        _HOSTS_LIST=("${H_EXPANDED[@]}" "${_HOSTS_LIST[@]}")
      elif [ "$OP" == "A" ]; then
        p_debug "adding ${H_EXPANDED[@]}"
        _HOSTS_LIST+=("${H_EXPANDED[@]}")
      else
        p_debug "removing ${H_EXPANDED[@]}"
        _EXCLUDED_HOSTS_LIST+=("${H_EXPANDED[@]}")
      fi
    fi
  done <<< "${HOSTS},"
}
# Just for this run
_RUN_SEPARATOR="$(uuidgen)"
function runin() {
  # Run a command in a host (and redirect the output to a file (- means stdout))
  local HOST="$1"
  local REDIRECT="$2"
  shift
  shift
  local ESHELL="${SHELL:-sh}"
  local COMMAND=("$ESHELL" "-s")
  if [ "$REDIRECT" != "-" ]; then
    COMMAND+=(">$REDIRECT")
    COMMAND+=("2>&1")
  fi
  if [ "$SSHUSER" != "" ]; then
    HOST="${SSHUSER}@${HOST}"
  fi
  ssh $SSHOPTIONS "$HOST" "${COMMAND[@]}" <<$_RUN_SEPARATOR
$@
$_RUN_SEPARATOR
}
function excludehosts() {
  local EXCLUDE=
  # Exclude the hosts (if needed)
  _NEW_HOSTS_LIST=()
  for ((i=0; i<${#_HOSTS_LIST[@]}; i=i+1)); do
    EXCLUDE=false
    for ((j=0; j<${#_EXCLUDED_HOSTS_LIST[@]};j=j+1)); do
      if [ "${_HOSTS_LIST[$i]}" == "${_EXCLUDED_HOSTS_LIST[$j]}" ]; then
        EXCLUDE=true
        break
      fi
    done
    if [ "$EXCLUDE" == "false" ]; then
      _NEW_HOSTS_LIST+=("${_HOSTS_LIST[$i]}")
    fi
  done
  _HOSTS_LIST=("${_NEW_HOSTS_LIST[@]}")
}
# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"
bashc.parameters_start
CONFIGFILE="/etc/runall/runall.conf /etc/runall.conf etc/runall.conf"
while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --user|-u)              bashc.parameters_next
                            SSHUSER="$(bashc.parameters_current)";;
    --shell|-s)             bashc.parameters_next
                            OVERRIDESHELL="$(bashc.parameters_current)";;
    --quiet|-q)             QUIET=true;;
    --localhost|-l)         RUNLOCALHOST=true;;
    --summarize|-S)         SUMMARIZE=true;;
    --ask|-a)               ASK=true;;
    --override-hosts|-O)    OVERRIDEHOSTS=true;;
    --hostlist|-H)          bashc.parameters_next
                            hostlist A "$(bashc.parameters_current)";;
    --exclude-hostlist|-X)  bashc.parameters_next
                            hostlist D "$(bashc.parameters_current)";;
    --mute|-m)              MUTEOUTPUT=true;;
    --background|-b)        BACKGROUND=true;;
    --verbose|-v)           VERBOSE=true;;
    --debug)                DEBUG=true
                            VERBOSE=true;;
    --config|-c)            bashc.parameters_next
                            CONFIGFILE="$(bashc.parameters_current)";;
    --version | -V)         echo "$VERSION" && bashc.finalize;;
    --help | -h)            usage && bashc.finalize;;
    --)                     COMMAND+=("$PARAM")
                            while bashc.parameters_next; do
                              PARAM="$(bashc.parameters_current)"
                              COMMAND+=("$PARAM")
                            done;;
    *)                      usage && bashc.finalize 1 "invalid parameter $PARAM";;
  esac
done
verify_dependencies
bashc.readconffiles "$CONFIGFILE" HOSTS PREFIX SSHOPTIONS SHELL
if [ "$HOSTS" != "" ]; then
  if [ "$OVERRIDEHOSTS" != "true" ]; then
    hostlist P "$HOSTS"
  else
    p_info "overriding hosts from config file"
  fi
fi
bashc.dump_vars HOSTS PREFIX SSHOPTIONS SHELL
# Add the local host (if requested)
if [ "$RUNLOCALHOST" == "true" ]; then
  hostlist A "$(hostname)"
fi
excludehosts
# If we have no host to run in, finalize
if [ ${#_HOSTS_LIST} -eq 0 ]; then
  bashc.finalize 0 "no hosts where to run"
fi
# Check if we have a shell or not
if [ "$SHELL" == "" ]; then
  p_debug "setting default shell sh"
  SHELL=sh
fi
# The shell can be overrided in the commandline
if [ "$OVERRIDESHELL" != "" ]; then
  p_debug "overriding shell $SHELL with $OVERRIDESHELL"
  SHELL="$OVERRIDESHELL"
fi
# Read the command from the commandline
if [ "$COMMAND" = "" ]; then
    p_out "Type a set of command and hit CTRL-D to issue them in the hosts (CTRL-C aborts)"
    COMMAND="$(cat)"
fi
# If we have no command to run, finalize
if [ "$COMMAND" == "" ]; then
  bashc.finalize 0 "no command stated"
fi
# Summarize what is going to happen (if requested)
if [ "$SUMMARIZE" == "true" ]; then
  p_out "
SUMMARY:
hosts: 
${_HOSTS_LIST[@]}

command:
$PREFIX
$COMMAND
"
  if [ "$QUIET" != "true" ]; then
    read -p "press return to continue (CTRL-C aborts) "
  fi
fi
# Start running
for ((n=0;n<${#_HOSTS_LIST[@]};n=n+1)); do
  if [ "$BACKGROUND" == "true" ]; then
    # We are running the command in background
    if [ "$MUTEOUTPUT" == "true" ]; then
      FILE=/dev/null
    else
      FILE="/tmp/runall-${_HOSTS_LIST[$n]}-$(date +%Y%m%d%H%M%S)"
      p_info "leaving output in file $FILE at ${_HOSTS_LIST[$n]}"
      p_out "$FILE"
    fi
    # Double fork will detach the process
    ((runin "${_HOSTS_LIST[$n]}" "$FILE" "${COMMAND[@]}")&)
  else
    # We are running in sequential
    SHOULDRUN=true
    if [ "$ASK" == "true" ]; then
      # If requested to ask for each run, ask the user
      p_info "running in ${_HOSTS_LIST[$n]}"
      if [ "$QUIET" != "true" ]; then
        read -p "run in ${_HOSTS_LIST[$n]}? (Y/n) "  SHOULDRUN 
      fi
      # The default is true and we should only admit "n", but will admit also "no" to skip running
      SHOULDRUN="${SHOULDRUN,,}"
      if [ "$SHOULDRUN" == "n" -o "$SHOULDRUN" == "no" ]; then
        SHOULDRUN=false
      else
        SHOULDRUN=true
      fi
    fi
    if [ "$SHOULDRUN" == "true" ]; then
      # If we have to run the command, let's run it
      p_info "running in ${_HOSTS_LIST[$n]}"
      if [ "$MUTEOUTPUT" == "true" ]; then
        runin "${_HOSTS_LIST[$n]}" - "${COMMAND[@]}" > /dev/null 2> /dev/null
      else
        runin "${_HOSTS_LIST[$n]}" - "${COMMAND[@]}"
      fi
    else
      p_debug "skipping run in ${_HOSTS_LIST[$n]}"
    fi
  fi
done
